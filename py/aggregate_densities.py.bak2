import numpy as np
import matplotlib
import matplotlib.pyplot as plt

import parameters
from parameters import parameters as ps

for p in ps:
    el = p["tolerance_lower"]
    eu = p["tolerance_upper"]
    name = parameters.outname.format(**p).replace(".", "")
    a = np.loadtxt(name + ".density.dat") / p["samples"] / p["num_agents"]

    if len(a.shape) != 2:
        continue

    a[a==0] = np.nan

    # calculate entropy of the distributions at each time step
    entropy = []
    for i in range(a.shape[0]):
        # plt.plot(a[i,:])
        # plt.show()
        # plt.clf()
        S = sum(-P*np.log(P) for P in a[i, :] if np.isfinite(P))
        entropy.append(S)

    print(el, eu, p["num_agents"], p["eta"])
    plt.plot(entropy)
    plt.savefig("entropy_n{}l{:.2f}u{:.2f}s{}eta{}".format(p["num_agents"], el, eu, p["seed"], p["eta"]).replace(".", ""))
    # plt.show()
    plt.clf()

#    while a.shape[0] < 100:
#        a = np.append(a, [a[-1]], axis=0)

    plt.imshow(
        a.transpose(),
        cmap=plt.cm.viridis_r,
        vmin=1/p["num_agents"],
        aspect="auto",
#        vmax=1,
#        norm=matplotlib.colors.LogNorm()
    )

    plt.tight_layout()

    print(el, eu)
    plt.colorbar()
    plt.savefig("n{}l{:.2f}u{:.2f}s{}eta{}".format(p["num_agents"], el, eu, p["seed"], p["eta"]).replace(".", ""))
    plt.clf()
